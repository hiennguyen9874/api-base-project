FROM python:3.10-slim AS base

RUN export DEBIAN_FRONTEND=noninteractive
RUN apt-get update -yq && \
apt-get install -yq --no-install-recommends curl \
ca-certificates libcurl4-openssl-dev libssl-dev \
iputils-ping netcat-traditional && \
rm -rf /var/lib/apt/lists/*

RUN apt-get update -yq && \
    apt-get install -yq --no-install-recommends \
    build-essential gcc libpq-dev libc-dev libmagic1 libpq5 libjemalloc2 && \
    rm -rf /var/lib/apt/lists/*

# Allow legacy SSL renegotiation
RUN mkdir -p /etc/ssl && \
    echo 'openssl_conf = openssl_init\n\
\n\
[openssl_init]\n\
ssl_conf = ssl_sect\n\
\n\
[ssl_sect]\n\
system_default = system_default_sect\n\
\n\
[system_default_sect]\n\
Options = UnsafeLegacyRenegotiation\n\
CipherString = DEFAULT:@SECLEVEL=0\n' \
    > /etc/ssl/openssl.cnf

ENV OPENSSL_CONF=/etc/ssl/openssl.cnf

# https://github.com/orgs/python-poetry/discussions/1879#discussioncomment-216865
ENV PYTHONUNBUFFERED=1 \
    # prevents python creating .pyc files
    PYTHONDONTWRITEBYTECODE=1 \
    # pip
    PIP_NO_CACHE_DIR=off \
    PIP_DISABLE_PIP_VERSION_CHECK=on \
    PIP_DEFAULT_TIMEOUT=100 \
    # uv
    # Ref: https://docs.astral.sh/uv/guides/integration/docker/#compiling-bytecode
    UV_COMPILE_BYTECODE=1 \
    # Ref: https://docs.astral.sh/uv/guides/integration/docker/#caching
    UV_LINK_MODE=copy \
    UV_PYTHON=3.10 \
    # UV_PYTHON_DOWNLOADS=never \
    UV_PROJECT_ENVIRONMENT=/app/.venv

WORKDIR /app

# Place executables in the environment at the front of the path
ENV PATH="/app/.venv/bin:$PATH"
ENV PYTHONPATH=/app

FROM base AS builder

RUN export DEBIAN_FRONTEND=noninteractive
RUN apt-get update -yq && \
    apt-get install -yq --no-install-recommends build-essential clang && \
    rm -rf /var/lib/apt/lists/*

# Install uv
# Ref: https://docs.astral.sh/uv/guides/integration/docker/#installing-uv
COPY --from=ghcr.io/astral-sh/uv:0.5.10 /uv /uvx /bin/

# Install dependencies
# Ref: https://docs.astral.sh/uv/guides/integration/docker/#intermediate-layers
RUN --mount=type=bind,source=uv.lock,target=uv.lock \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
    uv sync --frozen --no-install-project --no-dev --no-editable

COPY alembic.ini /app
COPY ./app /app/app

COPY setup.py /app

# RUN python3 setup.py bdist --cythonize && \
#     python3 setup.py install --cythonize

# FROM base AS code-clean

# COPY alembic.ini /app
# COPY ./app /app/app

# RUN find /app/app -maxdepth 1 -mindepth 1 -type d ! -name 'configs' ! -name 'static' ! -name 'email-templates' ! -name 'alembic' ! -name 'avro_schemas' -exec rm -rv {} \;

FROM base AS runtime

COPY ./scripts/prestart.sh /prestart.sh
RUN chmod +x /prestart.sh

COPY --from=builder /app/ /app/
