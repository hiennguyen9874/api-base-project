name: Code Quality Checks

on:
  push:
    tags:
      - v*
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

permissions:
  contents: read
  pull-requests: read

env:
  PYTHON_VERSION: '3.10'
  NODE_VERSION: '18'

jobs:
  # Detect changes to determine which jobs to run
  changes:
    runs-on: ubuntu-22.04
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'api/**'
              - '.pre-commit-config.yaml'
              - 'mypy.ini'
              - 'ruff.toml'
              - 'bandit.yaml'
            frontend:
              - 'frontend/**'

  # Backend code quality checks
  backend-quality:
    runs-on: ubuntu-22.04
    needs: changes
    if: needs.changes.outputs.backend == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pre-commit
          key: backend-${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements*.txt', '.pre-commit-config.yaml') }}
          restore-keys: |
            backend-${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-

      - name: Install system dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit pylint
          mkdir -p ~/.local/bin
          wget -O ~/.local/bin/hadolint https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64
          chmod +x ~/.local/bin/hadolint
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Run pre-commit hooks
        run: |
          pre-commit run --all-files --show-diff-on-failure --color=always

  # Frontend code quality checks
  frontend-quality:
    runs-on: ubuntu-22.04
    needs: changes
    if: needs.changes.outputs.frontend == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Run frontend linting
        working-directory: frontend
        run: |
          npm run lint
          npm run format:check

      - name: Run frontend type checking
        working-directory: frontend
        run: npm run type-check

  # Security scanning
  security-scan:
    runs-on: ubuntu-22.04
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run secret scanning
        uses: trufflesecurity/trufflehog@v3.89.2
        with:
          extra_args: --results=verified,unknown

  # CodeQL security analysis
  codeql-analyze:
    runs-on: ubuntu-22.04
    needs: changes
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        include:
          - language: python
            path: api
            condition: ${{ needs.changes.outputs.backend == 'true' }}
          - language: javascript
            path: frontend
            condition: ${{ needs.changes.outputs.frontend == 'true' }}

    steps:
      - name: Checkout code
        if: matrix.condition == 'true'
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        if: matrix.condition == 'true'
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          source-root: ${{ matrix.path }}

      - name: Setup Python (for Python analysis)
        if: matrix.condition == 'true' && matrix.language == 'python'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Node.js (for JavaScript analysis)
        if: matrix.condition == 'true' && matrix.language == 'javascript'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies (JavaScript)
        if: matrix.condition == 'true' && matrix.language == 'javascript'
        working-directory: frontend
        run: npm ci

      - name: Perform CodeQL Analysis
        if: matrix.condition == 'true'
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:${{ matrix.language }}'
